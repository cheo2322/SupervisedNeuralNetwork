% Clear all variables, the command windows and close all windows
% ----------------------------------------
clear;
clc;
close all;
% ---------------------------------------

load DatosLS50 % Loading Data for Perceptron
LR = 0.1;      % Learning Rate

% Perceptron Functionality
% -----------------------------------
W = PerceptronWeigthsGenerator(Data);                       % Generate the initial Random Weights
Epoc = 1;                                                   % Starting epochs
EvolW = W;                                                  % Random weights are added to the evolution weights matrix; at the start
while ~CheckPattern(Data,EvolW(:,end)) && Epoc<100          % while we do not have a correct classification, continue editing weights
    for i=1:size(Data,1)                                    % loop for each inputs set
        [Input,Output,Target] = ValoresIOT(Data,EvolW,i);   % calculate the necessary values
        if Output ~= Target                                 % update the weights iff it is necessary
           EvolW = UpdateNet(EvolW,LR,Output,Target,Input); 
        end
    end
    Epoc=Epoc+1;                                            % go to the next epoch
end
% ---------------------------------------------

% Plot data and perceptron classification
% ---------------------------------------------
for i=1:size(EvolW,2)       % Loop for in each weight update                                 
    GrapNeuron(EvolW(:,i))  % Graph each weight
    GrapDatos(Data)         % Gaph the correspondent data (AND, OR, ...)
    drawnow
end
